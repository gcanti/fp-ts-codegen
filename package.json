{
  "name": "fp-ts-codegen",
  "version": "0.2.0",
  "description": "TypeScript code generation from a haskell-like syntax for ADT",
  "files": [
    "lib"
  ],
  "main": "lib/index.js",
  "typings": "lib/index.d.ts",
  "scripts": {
    "lint": "tslint -p tsconfig.json src/**/*.ts test/**/*.ts",
    "jest": "jest",
    "prettier": "prettier --no-semi --single-quote --print-width 120 --parser typescript --list-different \"{src,test}/**/*.ts\"",
    "fix-prettier": "prettier --no-semi --single-quote --print-width 120 --parser typescript --write \"{src,test}/**/*.ts\"",
    "test": "npm run prettier && npm run jest && npm run examples",
    "clean": "rimraf rm -rf lib/*",
    "build": "npm run clean && tsc",
    "dtslint": "dtslint dtslint",
    "mocha": "mocha -r ts-node/register \"./test/**/*.ts\" --recursive",
    "examples": "rimraf examples/*.ts && ts-node generate-examples.ts && ts-node examples/index.ts"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gcanti/fp-ts-codegen.git"
  },
  "author": "Giulio Canti <giulio.canti@gmail.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/gcanti/fp-ts-codegen/issues"
  },
  "homepage": "https://github.com/gcanti/fp-ts-codegen",
  "dependencies": {
    "fp-ts": "^1.13.0",
    "monocle-ts": "^1.5.3",
    "parser-ts": "^0.5.1",
    "typescript": "^3.2.4"
  },
  "devDependencies": {
    "@types/jest": "^23.3.13",
    "@types/node": "^10.12.18",
    "dtslint": "^0.4.2",
    "jest": "^23.6.0",
    "mocha": "^5.2.0",
    "prettier": "^1.16.1",
    "rimraf": "^2.6.3",
    "ts-jest": "^23.10.5",
    "ts-node": "3.3.0",
    "tslint": "^5.12.1",
    "tslint-config-standard": "^8.0.1"
  },
  "tags": [
    "fp-ts",
    "ADT"
  ],
  "keywords": [
    "fp-ts",
    "ADT"
  ],
  "jest": {
    "globals": {
      "ts-jest": {
        "skipBabel": true
      }
    },
    "collectCoverage": true,
    "transform": {
      "^.+\\.tsx?$": "ts-jest"
    },
    "testRegex": "test",
    "moduleFileExtensions": [
      "ts",
      "js"
    ],
    "testPathIgnorePatterns": [
      "helpers.ts",
      "examples.ts"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 100,
        "functions": 100,
        "lines": 100,
        "statements": 0
      }
    }
  }
}
